﻿/// <summary>
/// Represents an API server response.
/// </summary>
[System.Diagnostics.DebuggerDisplay("{GetDebuggerDisplay(),nq}")]
public readonly struct ApiResponse
{
	/// <summary>
	/// Initializes a new instance of the <see cref="ApiResponse"/> struct.
	/// </summary>
	/// <param name="code">The HTTP status code.</param>
	/// <param name="message">The error message.</param>
	public ApiResponse(int code, string message = default)
	{
		StatusCode = code;
		Message = message;
	}

	/// <summary>
	/// The HTTP status code.
	/// </summary>
	public int StatusCode { get; }

	/// <summary>
	/// The response message.
	/// </summary>
	public string Message { get; }

	/// <summary>
	/// Determines whether the HTTP response was successful.
	/// </summary>
	public bool Succeeded =>  StatusCode >= 200 && StatusCode <= 299;

	/// <summary>
	/// Determines whether the HTTP response was NOT successful.
	/// </summary>
	public bool Failed => Succeeded == false;

	/// <summary>
	/// Convert this object to its string representation.
	/// </summary>
	public override string ToString() => Message;

	private string GetDebuggerDisplay() => $"[{StatusCode}] {Message}".Trim();

	public static implicit operator bool(ApiResponse obj) => obj.Succeeded;

}
/// <summary>
/// Represents an API server response.
/// </summary>
[System.Diagnostics.DebuggerDisplay("{GetDebuggerDisplay(),nq}")]
public readonly struct ApiResponse<T>
{
	/// <summary>
	/// Initializes a new instance of the <see cref="ApiResponse"/> struct.
	/// </summary>
	/// <param name="code">The HTTP status code.</param>
	/// <param name="message">The error message.</param>
	public ApiResponse(int code, string message = default) : this(default, code, message) {}

	/// <summary>
	/// Initializes a new instance of the <see cref="ApiResponse"/> struct.
	/// </summary>
	/// <param name="data">The HTTP response object.</param>
	/// <param name="code">The HTTP status code.</param>
	/// <param name="message">The error message.</param>
	public ApiResponse(T data, int code, string message = default)
	{
		StatusCode = code;
		Message = message;
		Data = data;
	}

	/// <summary>
	/// The HTTP response object.
	/// </summary>
	public T Data { get; }

	/// <summary>
	/// The HTTP status code.
	/// </summary>
	public int StatusCode { get; }

	/// <summary>
	/// The response message.
	/// </summary>
	public string Message { get; }

	/// <summary>
	/// Determines whether the HTTP response was successful.
	/// </summary>
	public bool Succeeded =>  StatusCode >= 200 && StatusCode <= 299;

	/// <summary>
	/// Determines whether the HTTP response was NOT successful.
	/// </summary>
	public bool Failed => Succeeded == false;

	/// <summary>
	/// Convert this object to its string representation.
	/// </summary>
	public override string ToString() => Message;

	private string GetDebuggerDisplay() => $"[{StatusCode}] {Message}".Trim();

	public static implicit operator bool(ApiResponse<T> obj) => obj.Succeeded;

	public static implicit operator T(ApiResponse<T> obj) => obj.Data;

	public static implicit operator ApiResponse(ApiResponse<T> obj) => new ApiResponse(obj.StatusCode, obj.Message);

}
