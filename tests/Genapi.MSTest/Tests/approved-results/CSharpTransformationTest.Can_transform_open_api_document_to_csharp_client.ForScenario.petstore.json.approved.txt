﻿using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using System;
using System.Net.Http;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace Tekcari.Genapi
{
	public partial class GeneratedClient
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="GeneratedClient"/> class.
		/// </summary>
		/// <param name="baseUrl">The API server URL.</param>
		/// <param name="httpClientFactory">The client factory.</param>
		/// <param name="logger">The logger.</param>
		/// <exception cref="System.ArgumentNullException">baseUrl</exception>
		/// <exception cref="System.ArgumentNullException">httpClientFactory</exception>
		public GeneratedClient(string baseUrl, IHttpClientFactory httpClientFactory, ILogger<GeneratedClient> logger)
		{
			_baseUrl = baseUrl ?? throw new ArgumentNullException(nameof(httpClientFactory));
			_factory = httpClientFactory ?? CreateHttpClientFactory() ?? throw new ArgumentNullException(nameof(httpClientFactory));
			_logger = logger;
		}

		/// <summary>
		/// List all pets.
		/// </summary>
		// <param name="limit">How many items to return at one time (max 100).</param>
		public async Task<ApiResponse<IEnumerable<Pet>>> listPets(int limit)
		{
			var request = new HttpRequestMessage(HttpMethod.Get, GetEndpoint($"/pets?limit={limit}"));
			HttpClient client = _factory.CreateClient();
			using (HttpResponseMessage response = await client.SendAsync(request))
			{
				switch ((int)response.StatusCode)
				{
					case 200:
						return new ApiResponse<IEnumerable<Pet>>(JsonSerializer.Deserialize<IEnumerable<Pet>>(await response.Content.ReadAsStringAsync(), _serializerOptions), (int)response.StatusCode);
					default:
						return new ApiResponse<Error>(JsonSerializer.Deserialize<Error>(await response.Content.ReadAsStringAsync(), _serializerOptions), (int)response.StatusCode);
				}
			}
		}
		/// <summary>
		/// Create a pet.
		/// </summary>
		public async Task<ApiResponse> createPets()
		{
			var request = new HttpRequestMessage(HttpMethod.Post, GetEndpoint($"/pets"));
			HttpClient client = _factory.CreateClient();
			using (HttpResponseMessage response = await client.SendAsync(request))
			{
				switch ((int)response.StatusCode)
				{
					case 201:
						return new ApiResponse((int)response.StatusCode, response.ReasonPhrase);
					default:
						return new ApiResponse<Error>(JsonSerializer.Deserialize<Error>(await response.Content.ReadAsStringAsync(), _serializerOptions), (int)response.StatusCode);
				}
			}
		}
		/// <summary>
		/// Info for a specific pet.
		/// </summary>
		// <param name="petId">The id of the pet to retrieve.</param>
		public async Task<ApiResponse<Pet>> showPetById(string petId)
		{
			var request = new HttpRequestMessage(HttpMethod.Get, GetEndpoint($"/pets/{petId}"));
			HttpClient client = _factory.CreateClient();
			using (HttpResponseMessage response = await client.SendAsync(request))
			{
				switch ((int)response.StatusCode)
				{
					case 200:
						return new ApiResponse<Pet>(JsonSerializer.Deserialize<Pet>(await response.Content.ReadAsStringAsync(), _serializerOptions), (int)response.StatusCode);
					default:
						return new ApiResponse<Error>(JsonSerializer.Deserialize<Error>(await response.Content.ReadAsStringAsync(), _serializerOptions), (int)response.StatusCode);
				}
			}
		}
		#region Backing Members

		private readonly IHttpClientFactory _factory;
		private readonly string _baseUrl;
		private readonly ILogger _logger;
		private readonly JsonSerializerOptions _serializerOptions = new System.Text.Json.JsonSerializerOptions();

		private string GetEndpoint(string path) => string.Concat(_baseUrl, path);

		private static IHttpClientFactory GetHttpClientFactory() => new ServiceCollection().AddHttpClient().BuildServiceProvider().GetService<IHttpClientFactory>();

		#endregion Backing Members
	}

	public partial class Pet
	{
		[JsonPropertyName("id")]
		public integer id { get; set; }

		[JsonPropertyName("name")]
		public string name { get; set; }

		[JsonPropertyName("tag")]
		public string tag { get; set; }

	}
	public partial class Error
	{
		[JsonPropertyName("code")]
		public integer code { get; set; }

		[JsonPropertyName("message")]
		public string message { get; set; }

	}

	/// <summary>
	/// Represents an API server response.
	/// </summary>
	[System.Diagnostics.DebuggerDisplay("{GetDebuggerDisplay(),nq}")]
	public readonly struct ApiResponse
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="ApiResponse"/> struct.
		/// </summary>
		/// <param name="code">The HTTP status code.</param>
		/// <param name="message">The error message.</param>
		public ApiResponse(int code, string message = default)
		{
			StatusCode = code;
			Message = message;
		}

		/// <summary>
		/// The HTTP status code.
		/// </summary>
		public int StatusCode { get; }

		/// <summary>
		/// The response message.
		/// </summary>
		public string Message { get; }

		/// <summary>
		/// Determines whether the HTTP response was successful.
		/// </summary>
		public bool Succeeded =>  StatusCode >= 200 && StatusCode <= 299;

		/// <summary>
		/// Determines whether the HTTP response was NOT successful.
		/// </summary>
		public bool Failed => Succeeded == false;

		/// <summary>
		/// Convert this object to its string representation.
		/// </summary>
		public override string ToString() => Message;

		private string GetDebuggerDisplay() => $"[{StatusCode}] {Message}".Trim();

		public static implicit operator bool(ApiResponse obj) => obj.Succeeded;

	}

	/// <summary>
	/// Represents an API server response.
	/// </summary>
	[System.Diagnostics.DebuggerDisplay("{GetDebuggerDisplay(),nq}")]
	public readonly struct ApiResponse<T>
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="ApiResponse"/> struct.
		/// </summary>
		/// <param name="code">The HTTP status code.</param>
		/// <param name="message">The error message.</param>
		public ApiResponse(int code, string message = default) : this(default, code, message) {}

		/// <summary>
		/// Initializes a new instance of the <see cref="ApiResponse"/> struct.
		/// </summary>
		/// <param name="data">The HTTP response object.</param>
		/// <param name="code">The HTTP status code.</param>
		/// <param name="message">The error message.</param>
		public ApiResponse(T data, int code, string message = default)
		{
			StatusCode = code;
			Message = message;
			Data = data;
		}

		/// <summary>
		/// The HTTP response object.
		/// </summary>
		public T Data { get; }

		/// <summary>
		/// The HTTP status code.
		/// </summary>
		public int StatusCode { get; }

		/// <summary>
		/// The response message.
		/// </summary>
		public string Message { get; }

		/// <summary>
		/// Determines whether the HTTP response was successful.
		/// </summary>
		public bool Succeeded =>  StatusCode >= 200 && StatusCode <= 299;

		/// <summary>
		/// Determines whether the HTTP response was NOT successful.
		/// </summary>
		public bool Failed => Succeeded == false;

		/// <summary>
		/// Convert this object to its string representation.
		/// </summary>
		public override string ToString() => Message;

		private string GetDebuggerDisplay() => $"[{StatusCode}] {Message}".Trim();

		public static implicit operator bool(ApiResponse<T> obj) => obj.Succeeded;

		public static implicit operator T(ApiResponse<T> obj) => obj.Data;

		public static implicit operator ApiResponse(ApiResponse<T> obj) => new ApiResponse(obj.StatusCode, obj.Message);

	}
}
