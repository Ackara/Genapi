== ApiResponse.cs
==================================================

public class ApiResponse
{
	[JsonPropertyName("code")]
	public int code { get; set; }

	[JsonPropertyName("type")]
	public string type { get; set; }

	[JsonPropertyName("message")]
	public string message { get; set; }

}


== Pet.cs
==================================================

public class Pet
{
	[JsonPropertyName("id")]
	public long id { get; set; }

	[JsonPropertyName("name")]
	public string name { get; set; }

	[JsonPropertyName("category")]
	public Category category { get; set; }

	[JsonPropertyName("photoUrls")]
	public string[] photoUrls { get; set; }

	[JsonPropertyName("tags")]
	public Tag[] tags { get; set; }

	/// <summary>pet status in the store</summary>
	[JsonPropertyName("status")]
	public string status { get; set; }

}


== Tag.cs
==================================================

public class Tag
{
	[JsonPropertyName("id")]
	public long id { get; set; }

	[JsonPropertyName("name")]
	public string name { get; set; }

}


== User.cs
==================================================

public class User
{
	[JsonPropertyName("id")]
	public long id { get; set; }

	[JsonPropertyName("username")]
	public string username { get; set; }

	[JsonPropertyName("firstName")]
	public string firstName { get; set; }

	[JsonPropertyName("lastName")]
	public string lastName { get; set; }

	[JsonPropertyName("email")]
	public string email { get; set; }

	[JsonPropertyName("password")]
	public string password { get; set; }

	[JsonPropertyName("phone")]
	public string phone { get; set; }

	/// <summary>User Status</summary>
	[JsonPropertyName("userStatus")]
	public int userStatus { get; set; }

}


== Category.cs
==================================================

public class Category
{
	[JsonPropertyName("id")]
	public long id { get; set; }

	[JsonPropertyName("name")]
	public string name { get; set; }

}


== Address.cs
==================================================

public class Address
{
	[JsonPropertyName("street")]
	public string street { get; set; }

	[JsonPropertyName("city")]
	public string city { get; set; }

	[JsonPropertyName("state")]
	public string state { get; set; }

	[JsonPropertyName("zip")]
	public string zip { get; set; }

}


== Customer.cs
==================================================

public class Customer
{
	[JsonPropertyName("id")]
	public long id { get; set; }

	[JsonPropertyName("username")]
	public string username { get; set; }

	[JsonPropertyName("address")]
	public Address[] address { get; set; }

}


== Order.cs
==================================================

public class Order
{
	[JsonPropertyName("id")]
	public long id { get; set; }

	[JsonPropertyName("petId")]
	public long petId { get; set; }

	[JsonPropertyName("quantity")]
	public int quantity { get; set; }

	[JsonPropertyName("shipDate")]
	public DateTime shipDate { get; set; }

	/// <summary>Order Status</summary>
	[JsonPropertyName("status")]
	public string status { get; set; }

	[JsonPropertyName("complete")]
	public bool complete { get; set; }

}


== Response.cs
==================================================

namespace Tekcari.Genapi
{
	[System.Diagnostics.DebuggerDisplay("{" + nameof(Format) + "(),nq}")]
	/// <summary>
	/// Represents response from API server.
	/// </summary>
	public readonly struct Response
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="Response"/> struct.
		/// </summary>
		/// <param name="statusCode">The status code.</param>
		/// <param name="message">The message.</param>
		public Response(int statusCode, string message = default)
			: this(IsGood(statusCode), statusCode, message)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="Response"/> struct.
		/// </summary>
		/// <param name="success">if set to <c>true</c> [success].</param>
		/// <param name="statusCode">The status code.</param>
		/// <param name="message">The message.</param>
		public Response(bool success, int statusCode, string message)
		{
			Message = message;
			Succeeded = success;
			StatusCode = statusCode;
		}

		/// <summary>
		/// Gets the HTTP status code.
		/// </summary>
		/// <value>The HTTP status code.</value>
		public int StatusCode { get; }

		/// <summary>
		/// Gets the error message.
		/// </summary>
		/// <value>The message.</value>
		public string Message { get; }

		/// <summary>
		/// Gets a value indicating whether the corresponding request is succeeded.
		/// </summary>
		/// <value><c>true</c> if succeeded; otherwise, <c>false</c>.</value>
		public bool Succeeded { get; }

		/// <summary>
		/// Gets a value indicating whether the corresponding request is failed.
		/// </summary>
		/// <value><c>true</c> if failed; otherwise, <c>false</c>.</value>
		public bool Failed
		{
			get => Succeeded == false;
		}

		/// <summary>
		/// Convert the value of this instance to a <see cref="System.String"/>.
		/// </summary>
		/// <returns>
		/// A <see cref="System.String" /> that represents this instance.
		/// </returns>
		public override string ToString() => Message;

		internal string Format() => $"({StatusCode}): {Message}".Trim(' ', ':');

		#region operators

		public static implicit operator bool(Response x) => x.Succeeded;

		#endregion operators
	}

	[System.Diagnostics.DebuggerDisplay("{" + nameof(Format) + "(),nq}")]
	/// <summary>
	/// Represents response data from API server.
	/// </summary>
	/// <typeparam name="T"></typeparam>
	public readonly struct Response<T>
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="Response{T}"/> struct.
		/// </summary>
		/// <param name="data">The data.</param>
		/// <param name="statusCode">The status code.</param>
		/// <param name="message">The message.</param>
		public Response(T data, int statusCode = 200, string message = default)
			: this(data, Response.IsGood(statusCode), statusCode, message) { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Response{T}"/> struct.
		/// </summary>
		/// <param name="data">The data.</param>
		/// <param name="success">if set to <c>true</c> [success].</param>
		/// <param name="status">The status.</param>
		/// <param name="message">The message.</param>
		public Response(T data, bool success, int status, string message)
		{
			Data = data;
			Succeeded = success;
			StatusCode = status;
			Message = message;
		}

		/// <summary>
		/// Gets the data.
		/// </summary>
		/// <value>The data.</value>
		public T Data { get; }

		/// <summary>
		/// Gets the HTTP status code.
		/// </summary>
		/// <value>The HTTP status code.</value>
		public int StatusCode { get; }

		/// <summary>
		/// Gets the error message.
		/// </summary>
		/// <value>The message.</value>
		public string Message { get; }

		/// <summary>
		/// Gets a value indicating whether the corresponding request is succeeded.
		/// </summary>
		/// <value><c>true</c> if succeeded; otherwise, <c>false</c>.</value>
		public bool Succeeded { get; }

		/// <summary>
		/// Gets a value indicating whether the corresponding request is failed.
		/// </summary>
		/// <value><c>true</c> if failed; otherwise, <c>false</c>.</value>
		public bool Failed
		{
			get => Succeeded == false;
		}

		/// <summary>
		/// Convert the value of this instance to a <see cref="System.String"/>.
		/// </summary>
		/// <returns>
		/// A <see cref="System.String" /> that represents this instance.
		/// </returns>
		public override string ToString() => Message;

		internal string Format() => $"({StatusCode}): {Message}".Trim(' ', ':');

		#region operators

		public static implicit operator T(Response<T> x) => x.Data;

		public static explicit operator bool(Response<T> x) => x.Succeeded;

		public static implicit operator Response(Response<T> x) => new Response(x.Succeeded, x.StatusCode, x.Message);

		#endregion operators
	}
}


