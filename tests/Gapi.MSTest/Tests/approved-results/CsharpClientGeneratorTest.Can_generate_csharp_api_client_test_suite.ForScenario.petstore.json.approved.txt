== GeneratedApiClientTest.cs
==================================================

using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Text.RegularExpressions;

namespace Tekcari.Gapi
{
	[TestClass]
	public partial class GeneratedApiClientTest
	{
		[TestMethod]
		public async Task Can_updatePet()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");
			var pet = AutoBogus.AutoFaker.Generate<Pet>();

			var response = await sut.updatePetAsync(pet: pet);

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

		[TestMethod]
		public async Task Can_addPet()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");
			var pet = AutoBogus.AutoFaker.Generate<Pet>();

			var response = await sut.addPetAsync(pet: pet);

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

		[TestMethod]
		public async Task Can_findPetsByStatus()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");
			var status = AutoBogus.AutoFaker.Generate<string>();

			var response = await sut.findPetsByStatusAsync(status: status);

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

		[TestMethod]
		public async Task Can_findPetsByTags()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");
			var tags = AutoBogus.AutoFaker.Generate<string[]>();

			var response = await sut.findPetsByTagsAsync(tags: tags);

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

		[TestMethod]
		public async Task Can_getPetById()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");
			var petId = AutoBogus.AutoFaker.Generate<long>();

			var response = await sut.getPetByIdAsync(petId: petId);

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

		[TestMethod]
		public async Task Can_updatePetWithForm()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");
			var petId = AutoBogus.AutoFaker.Generate<long>();
			var name = AutoBogus.AutoFaker.Generate<string>();
			var status = AutoBogus.AutoFaker.Generate<string>();

			var response = await sut.updatePetWithFormAsync(petId: petId, name: name, status: status);

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

		[TestMethod]
		public async Task Can_deletePet()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");
			var petId = AutoBogus.AutoFaker.Generate<long>();
			var api_key = AutoBogus.AutoFaker.Generate<string>();

			var response = await sut.deletePetAsync(petId: petId, api_key: api_key);

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

		[TestMethod]
		public async Task Can_uploadFile()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");
			var data = AutoBogus.AutoFaker.Generate<byte[]>();
			var petId = AutoBogus.AutoFaker.Generate<long>();
			var additionalMetadata = AutoBogus.AutoFaker.Generate<string>();

			var response = await sut.uploadFileAsync(data: data, petId: petId, additionalMetadata: additionalMetadata);

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

		[TestMethod]
		public async Task Can_getInventory()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");

			var response = await sut.getInventoryAsync();

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

		[TestMethod]
		public async Task Can_placeOrder()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");
			var order = AutoBogus.AutoFaker.Generate<Order>();

			var response = await sut.placeOrderAsync(order: order);

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

		[TestMethod]
		public async Task Can_getOrderById()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");
			var orderId = AutoBogus.AutoFaker.Generate<long>();

			var response = await sut.getOrderByIdAsync(orderId: orderId);

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

		[TestMethod]
		public async Task Can_deleteOrder()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");
			var orderId = AutoBogus.AutoFaker.Generate<long>();

			var response = await sut.deleteOrderAsync(orderId: orderId);

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

		[TestMethod]
		public async Task Can_createUser()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");
			var user = AutoBogus.AutoFaker.Generate<User>();

			var response = await sut.createUserAsync(user: user);

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

		[TestMethod]
		public async Task Can_createUsersWithListInput()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");
			var user = AutoBogus.AutoFaker.Generate<User[]>();

			var response = await sut.createUsersWithListInputAsync(user: user);

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

		[TestMethod]
		public async Task Can_loginUser()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");
			var username = AutoBogus.AutoFaker.Generate<string>();
			var password = AutoBogus.AutoFaker.Generate<string>();

			var response = await sut.loginUserAsync(username: username, password: password);

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

		[TestMethod]
		public async Task Can_logoutUser()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");

			var response = await sut.logoutUserAsync();

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

		[TestMethod]
		public async Task Can_getUserByName()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");
			var username = AutoBogus.AutoFaker.Generate<string>();

			var response = await sut.getUserByNameAsync(username: username);

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

		[TestMethod]
		public async Task Can_updateUser()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");
			var user = AutoBogus.AutoFaker.Generate<User>();
			var username = AutoBogus.AutoFaker.Generate<string>();

			var response = await sut.updateUserAsync(user: user, username: username);

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

		[TestMethod]
		public async Task Can_deleteUser()
		{
			var sut = new GeneratedApiClient("https://petstore3.swagger.io/api/v3");
			var username = AutoBogus.AutoFaker.Generate<string>();

			var response = await sut.deleteUserAsync(username: username);

			Assert.AreEqual(true, response.Succeeded, response.Message);
		}

	}
}



