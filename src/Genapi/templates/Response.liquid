namespace Tekcari.Genapi
{
	/// <summary>
	/// Represents a response from API server.
	/// </summary>
	public readonly struct Response
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="Response"/> struct.
		/// </summary>
		/// <param name="statusCode">The status code.</param>
		/// <param name="message">The message.</param>
		public Response(int statusCode, string message = default)
			: this(IsGood(statusCode), statusCode, message)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="Response"/> struct.
		/// </summary>
		/// <param name="success">if set to <c>true</c> [success].</param>
		/// <param name="statusCode">The status code.</param>
		/// <param name="message">The message.</param>
		public Response(bool success, int statusCode, string message)
		{
			Message = message;
			Succeeded = success;
			StatusCode = statusCode;
		}

		/// <summary>
		/// Gets the status code.
		/// </summary>
		/// <value>The status code.</value>
		public int StatusCode { get; }

		/// <summary>
		/// Gets the message.
		/// </summary>
		/// <value>The message.</value>
		public string Message { get; }

		/// <summary>
		/// Gets a value indicating whether this <see cref="Response"/> is succeeded.
		/// </summary>
		/// <value><c>true</c> if succeeded; otherwise, <c>false</c>.</value>
		public bool Succeeded { get; }

		/// <summary>
		/// Gets a value indicating whether this <see cref="Response"/> is failed.
		/// </summary>
		/// <value><c>true</c> if failed; otherwise, <c>false</c>.</value>
		public bool Failed
		{
			get => Succeeded == false;
		}

		/// <summary>
		/// Converts to string.
		/// </summary>
		/// <returns>
		/// A <see cref="System.String" /> that represents this instance.
		/// </returns>
		public override string ToString() => Format(StatusCode, Message);

		internal static bool IsGood(int code) => code >= 200 && code <= 299;

		internal static string Format(int code, string message) => $"({code}): {message}".Trim(' ', ':');

		#region operators

		public static implicit operator bool(Response x) => x.Succeeded;

		#endregion operators
	}

	public readonly struct Response<T>
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="Response{T}"/> struct.
		/// </summary>
		/// <param name="statusCode">The status code.</param>
		/// <param name="message">The message.</param>
		public Response(int statusCode, string message = default)
			: this(default, Response.IsGood(statusCode), statusCode, message) { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Response{T}"/> struct.
		/// </summary>
		/// <param name="data">The data.</param>
		/// <param name="statusCode">The status code.</param>
		/// <param name="message">The message.</param>
		public Response(T data, int statusCode = 200, string message = default)
			: this(data, Response.IsGood(statusCode), statusCode, message) { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Response{T}"/> struct.
		/// </summary>
		/// <param name="data">The data.</param>
		/// <param name="success">if set to <c>true</c> [success].</param>
		/// <param name="status">The status.</param>
		/// <param name="message">The message.</param>
		public Response(T data, bool success, int status, string message)
		{
			Data = data;
			Succeeded = success;
			StatusCode = status;
			Message = message;
		}

		/// <summary>
		/// Gets the data.
		/// </summary>
		/// <value>The data.</value>
		public T Data { get; }

		public int StatusCode { get; }

		public string Message { get; }

		public bool Succeeded { get; }

		public bool Failed
		{
			get => Succeeded == false;
		}

		public override string ToString() => Response.Format(StatusCode, Message);

		#region operators

		public static implicit operator T(Response<T> x) => x.Data;

		public static explicit operator bool(Response<T> x) => x.Succeeded;

		public static implicit operator Response(Response<T> x) => new Response(x.Succeeded, x.StatusCode, x.Message);

		#endregion operators
	}
}